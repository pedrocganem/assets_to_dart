use std::fs;
use std::io::ErrorKind;
use std::path::Path;
use walkdir::WalkDir;
use chrono::Local;

fn main() {
    let target_folder = "./assets";

    let output_file = "assets.dart";

    let mut dart_vars = String::new();
    dart_vars.push_str(&format!(
        "// Generated by 'assets_to_dart' at {}\n\n",
        Local::now().to_string()
    ));

    dart_vars.push_str("class Assets {\n");
    for entry in WalkDir::new(target_folder) {
        match entry {
            Ok(entry) => {
                if entry.file_type().is_file() {
                    let path = entry.path();
                    let path_str = path.to_string_lossy();
                    let var_name = create_var_name(path);

                    dart_vars.push_str(&format!(
                        "static const {} = '{}';\n",
                        var_name,
                        path_str.replace("./", "").replace("\\", "/")
                    ));
                }
            }
            Err(e) => eprintln!("Error: {}", e),
        }
    }
    dart_vars.push_str("}\n");

    match fs::write(output_file, dart_vars) {
        Ok(_) => println!("File '{}' generated successfully.", output_file),
        Err(e) => match e.kind() {
            ErrorKind::PermissionDenied => {
                eprintln!("Permission denied when trying to create '{}'.", output_file)
            }
            _ => eprintln!("Error while creating '{}': {}", output_file, e),
        },
    }
}

fn create_var_name(path: &Path) -> String {
    let mut lower_camel_case = String::new();
    let mut capitalize_next = false;
    for c in path
        .file_stem()
        .unwrap()
        .to_string_lossy()
        .chars()
        .filter(|c| c.is_alphanumeric() || *c == '_' || *c == '-')
    {
        if c == '_' || c == '-' {
            capitalize_next = true;
        } else if capitalize_next {
            lower_camel_case.push(c.to_ascii_uppercase());
            capitalize_next = false;
        } else {
            lower_camel_case.push(c);
        }
    }
    lower_camel_case
}

